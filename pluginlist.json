[ {
  "description" : "\n\n This plugin checks the fields of a ModalSubmitInteraction\n with regex or a custom callback\n",
  "hash" : "ab12dd67c26675dc81e57e97d1a08de0",
  "name" : "assertFields",
  "author" : [ "@jacoobes [<@182326315813306368>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/assertFields.ts",
  "example" : "\n\n ```ts\n export default commandModule({\n     type: CommandType.Modal,\n     plugins: [\n         assertFields({\n             fields: {\n             // check the modal field \"mcUsernameInput\" with the regex /a+b+c/\n                 mcUsernameInput: /a+b+c+/\n             },\n             failure: (errors, interaction) => {\n                 interaction.reply(errors.join(\"\\n\"))\n             }\n         }),\n     ],\n     execute: ctx => {\n         ctx.reply(\"nice!\")\n     }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n This is buttonConfirmation plugin, it runs confirmation prompt in the form of buttons.\n Note that you need to use edit/editReply in the command itself because we are already replying in the plugin!\n Credits to original plugin of confirmation using reactions and its author!\n",
  "hash" : "7a071169f57e5f87ade794957cf68ec5",
  "name" : "buttonConfirmation",
  "author" : [ "@EvolutionX-10 [<@697795666373640213>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/buttonConfirmation.ts",
  "example" : "\n\n ```ts\n import { buttonConfirmation } from \"../plugins/buttonConfirmation\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ buttonConfirmation() ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n This plugin checks if a channel is the specified type\n",
  "hash" : "c020108989582ab77b57911cf2e48337",
  "name" : "channelType",
  "author" : [ "@Benzo-Fury [<@762918086349029386>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/channelType.ts",
  "example" : "\n\n ```ts\n import { channelType } from \"../plugins/channelType\";\n import { ChannelType } from \"discord.js\"\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ channelType([ChannelType.GuildText], 'This cannot be used here') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n Asks the user for a confirmation message before executing the command\n",
  "hash" : "f4be14a6a80f987cb8d0ad7e8196ee79",
  "name" : "confirmation",
  "author" : [ "@trueharuu [<@504698587221852172>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/confirmation.ts",
  "example" : "\n\n ```ts\n import { confirmation } from \"../plugins/confirmation\";\n import { CommandType, commandModule } from \"@sern/handler\";\n\n // YOU MUST HAVE GUILD MESSAGE REACTION INTENTS ON YOUR CLIENT!!!!\n export default commandModule({\n  type : CommandType.Both\n  plugins: [confirmation()],\n \texecute: (ctx, args) => {\n \t\tctx.interaction.followUp('Hello welcome to the secret club')\n \t}\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n Allows you to set cooldowns (or \"ratelimits\") for commands\n limits user/channel/guild actions,",
  "hash" : "fc50aaad73efb5b6ae0d19469ef4a843",
  "name" : "cooldown",
  "author" : [ "@trueharuu [<@504698587221852172>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/cooldown.ts",
  "example" : "\n\n ```ts\n import { cooldown } from \"../plugins/cooldown\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [cooldown.add( [ ['channel', '1/4'] ] )], // limit to 1 action every 4 seconds per channel\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n Disables a command entirely, for whatever reasons you may need.\n",
  "hash" : "1de6d2e0fbc37f4cd2d41072003b7717",
  "name" : "disable",
  "author" : [ "@jacoobes [<@182326315813306368>]", "@Peter-MJ-Parker [<@371759410009341952>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/disable.ts",
  "example" : "\n\n ```ts\n import { disable } from \"../plugins/disable\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ disable() ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "2.0.0"
}, {
  "description" : "\n\n This is dmOnly plugin, it allows commands to be run only in DMs.\n",
  "hash" : "1289cba26f8e836e06be2db4e8296f9a",
  "name" : "dmOnly",
  "author" : [ "@EvolutionX-10 [<@697795666373640213>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/dmOnly.ts",
  "example" : "\n\n ```ts\n import { dmOnly } from \"../plugins/dmOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [dmOnly()],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n This plugin checks if the channel is nsfw and responds to user with a specified response if not nsfw\n",
  "hash" : "7da8e876336e40d14c1495c432a65283",
  "name" : "nsfwOnly",
  "author" : [ "@Benzo-Fury [<@762918086349029386>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/nsfwOnly.ts",
  "example" : "\n\n ```ts\n import { nsfwOnly } from \"../plugins/nsfwOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ nsfwOnly('response', true) ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.0"
}, {
  "description" : "\n\n This is OwnerOnly plugin, it allows only bot owners to run the command, like eval.\n",
  "hash" : "f90227b3d5ed9a2161bc40d36e3b5e81",
  "name" : "ownerOnly",
  "author" : [ "@EvolutionX-10 [<@697795666373640213>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/ownerOnly.ts",
  "example" : "\n\n ```ts\n import { ownerOnly } from \"../plugins/ownerOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ ownerOnly() ], // can also pass array of IDs to override default owner IDs\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.2.0"
}, {
  "description" : "\n\n This is perm check, it allows users to parse the permission you want and let the plugin do the rest. (check user for that perm).\n",
  "hash" : "2ae662d81b867b8ab7009dfcf9d2b8d2",
  "name" : "permCheck",
  "author" : [ "@Benzo-Fury [<@762918086349029386>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/permCheck.ts",
  "example" : "\n\n ```ts\n import { permCheck } from \"../plugins/permCheck\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ permCheck('permission', 'No permission response') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.0.1"
}, {
  "description" : "\n\n This is publish plugin, it allows you to publish your application commands using the discord.js library with ease.\n",
  "hash" : "fe3720d241ede15d11a00f8bf3b21256",
  "name" : "publish",
  "author" : [ "@EvolutionX-10 [<@697795666373640213>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/publish.ts",
  "example" : "\n\n ```ts\n import { publish } from \"../plugins/publish\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ publish() ], // put an object containing permissions, ids for guild commands, boolean for dmPermission\n  // plugins: [ publish({ guildIds: ['guildId'], defaultMemberPermissions: 'Administrator'})]\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "2.0.0"
}, {
  "description" : "\n\n This is perm check, it allows users to parse the permission you want and let the plugin do the rest. (check bot or user for that perm).\n",
  "hash" : "fad8c2e449976f086284ea41bd4894d8",
  "name" : "requirePermission",
  "author" : [ "@Benzo-Fury [<@762918086349029386>]", "@needhamgary [<@342314924804014081>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/requirePermission.ts",
  "example" : "\n\n ```ts\n import { requirePermission } from \"../plugins/myPermCheck\";\n import { commandModule, CommandType } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ requirePermission<CommandType>('target', 'permission', 'No response (optional)') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
  "version" : "1.2.0"
}, {
  "description" : "\n\n Checks if a command is available in a specific server.\n",
  "hash" : "aa4cc720a04aa6a9466d99d791cb4807",
  "name" : "serverOnly",
  "author" : [ "@Peter-MJ-Parker [<@371759410009341952>]" ],
  "link" : "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/serverOnly.ts",
  "example" : "\n\n ```ts\n import { commandModule, CommandType } from \"@sern/handler\";\n import { serverOnly } from \"../plugins/serverOnly\";\n export default commandModule({\n   type: CommandType.Both,\n   plugins: [serverOnly([\"guildId\"], failMessage)], // fail message is the message you will see when the command is ran in the wrong server.\n   description: \"command description\",\n   execute: async (ctx, args) => {\n     // your code here\n   },\n });\n ```",
  "version" : "1.0.0"
} ]