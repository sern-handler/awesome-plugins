[
	{
		"description": "\n\n This plugin checks the fields of a ModalSubmitInteraction\n with regex or a custom callback\n",
		"hash": "2da46f3202e2b209ab24620d4f890da2",
		"name": "assertFields",
		"author": ["@jacoobes [<@182326315813306368>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/assertFields.ts",
		"example": "\n\n ```ts\n export default commandModule({\n     type: CommandType.Modal,\n     plugins: [\n         assertFields({\n             fields: {\n             // check the modal field \"mcUsernameInput\" with the regex /a+b+c/\n                 mcUsernameInput: /a+b+c+/\n             },\n             failure: (errors, interaction) => {\n                 interaction.reply(errors.join(\"\\n\"))\n             }\n         }),\n     ],\n     execute: ctx => {\n         ctx.reply(\"nice!\")\n     }\n })\n ```\n\n/",
		"version": "1.0.0"
	},
	{
		"description": "\n\n This is buttonConfirmation plugin, it runs confirmation prompt in the form of buttons.\n Note that you need to use edit/editReply in the command itself because we are already replying in the plugin!\n Credits to original plugin of confirmation using reactions and its author!\n",
		"hash": "d752596f5d9871e469d142ccf5569691",
		"name": "buttonConfirmation",
		"author": ["@EvolutionX-10 [<@697795666373640213>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/buttonConfirmation.ts",
		"example": "\n\n ```ts\n import { buttonConfirmation } from \"../plugins/buttonConfirmation\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ buttonConfirmation() ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
		"version": "1.0.0"
	},
	{
		"description": "\n\n This plugin checks if a channel is the specified type\n",
		"hash": "a3f95ec62e1480b8c3318443cc8184c0",
		"name": "channelType",
		"author": ["@Benzo-Fury [<@762918086349029386>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/channelType.ts",
		"example": "\n\n ```ts\n import { channelType } from \"../plugins/channelType\";\n import { ChannelType } from \"discord.js\"\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ channelType([ChannelType.GuildText], 'This cannot be used here') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
		"version": "1.0.0"
	},
	{
		"description": "\n\n Asks the user for a confirmation message before executing the command\n",
		"hash": "77e7cc0e4f9706183d2debb918056809",
		"name": "confirmation",
		"author": ["@trueharuu [<@504698587221852172>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/confirmation.ts",
		"example": "\n\n ```ts\n import { confirmation } from \"../plugins/confirmation\";\n import { CommandType, commandModule } from \"@sern/handler\";\n\n // YOU MUST HAVE GUILD MESSAGE REACTION INTENTS ON YOUR CLIENT!!!!\n export default commandModule({\n  type : CommandType.Both\n  plugins: [confirmation()],\n \texecute: (ctx, args) => {\n \t\tctx.interaction.followUp('Hello welcome to the secret club')\n \t}\n })\n ```",
		"version": "1.0.0"
	},
	{
		"description": "\n\n Allows you to set cooldowns (or \"ratelimits\") for commands\n limits user/channel/guild actions,",
		"hash": "5dfb3c2f533878a15cf9764ffb921d1e",
		"name": "cooldown",
		"author": ["@trueharuu [<@504698587221852172>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/cooldown.ts",
		"example": "\n\n ```ts\n import { cooldown } from \"../plugins/cooldown\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [cooldown.add( [ ['channel', '1/4'] ] )], // limit to 1 action every 4 seconds per channel\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
		"version": "1.0.0"
	},
	{
		"description": "\n\n Disables a command entirely, for whatever reasons you may need.\n",
		"hash": "96e4b5b562500b0bcdc442fbf130a555",
		"name": "disable",
		"author": [
			"@jacoobes [<@182326315813306368>]",
			"@Peter-MJ-Parker [<@371759410009341952>]"
		],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/disable.ts",
		"example": "\n\n ```ts\n import { disable } from \"../plugins/disable\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ disable() ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "2.0.0"
	},
	{
		"description": "\n\n This is dmOnly plugin, it allows commands to be run only in DMs.\n",
		"hash": "844e68aa0c9147c98930b34a5d716a22",
		"name": "dmOnly",
		"author": ["@EvolutionX-10 [<@697795666373640213>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/dmOnly.ts",
		"example": "\n\n ```ts\n import { dmOnly } from \"../plugins/dmOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [dmOnly()],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "1.0.0"
	},
	{
		"description": "\n\n Generalized `filter` plugin. revised by jacoobes, all credit to original author.\n Perform declarative conditionals as plugins.  ",
		"hash": "ba85e67d23bbfacc337f82e9fade283c",
		"name": "filter",
		"author": ["@trueharuu [<@504698587221852172>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/filter.ts",
		"example": "\n\n import { filter, not, isGuildOwner, canMentionEveryone } from '../plugins/filter';\n import { commandModule } from '@sern/handler';\n\n export default commandModule({\n     plugins: [filter({ condition: [not(isGuildOwner()), canMentionEveryone()] })],\n     async execute(context) {\n       // your code here\n     }\n });",
		"version": "2.0.0"
	},
	{
		"description": "\n\n This plugin checks if the channel is nsfw and responds to user with a specified response if not nsfw\n",
		"hash": "65ff8138fd20486d6eeff17cdb7b93cf",
		"name": "nsfwOnly",
		"author": ["@Benzo-Fury [<@762918086349029386>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/nsfwOnly.ts",
		"example": "\n\n ```ts\n import { nsfwOnly } from \"../plugins/nsfwOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ nsfwOnly('response', true) ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "1.0.0"
	},
	{
		"description": "\n\n This is OwnerOnly plugin, it allows only bot owners to run the command, like eval.\n",
		"hash": "5ffb76d3a2ecdb0516fa98a93dd1d15d",
		"name": "ownerOnly",
		"author": ["@EvolutionX-10 [<@697795666373640213>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/ownerOnly.ts",
		"example": "\n\n ```ts\n import { ownerOnly } from \"../plugins/ownerOnly\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ ownerOnly() ], // can also pass array of IDs to override default owner IDs\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "1.2.0"
	},
	{
		"description": "\n\n This is perm check, it allows users to parse the permission you want and let the plugin do the rest. (check user for that perm).\n",
		"hash": "45fb62d9ffe908469ea58aabb550daf7",
		"name": "permCheck",
		"author": ["@Benzo-Fury [<@762918086349029386>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/permCheck.ts",
		"example": "\n\n ```ts\n import { permCheck } from \"../plugins/permCheck\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ permCheck('permission', 'No permission response') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ```",
		"version": "1.0.1"
	},
	{
		"description": "\n\n This is publish plugin, it allows you to publish your application commands using the discord.js library with ease.\n",
		"hash": "3f76c395a51cccc9c66de9ea65d28b19",
		"name": "publish",
		"author": ["@EvolutionX-10 [<@697795666373640213>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/publish.ts",
		"example": "\n\n ```ts\n import { publish } from \"../plugins/publish\";\n import { commandModule } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ publish() ], // put an object containing permissions, ids for guild commands, boolean for dmPermission\n  // plugins: [ publish({ guildIds: ['guildId'], defaultMemberPermissions: 'Administrator'})]\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "2.0.0"
	},
	{
		"description": "\n\n This is perm check, it allows users to parse the permission you want and let the plugin do the rest. (check bot or user for that perm).\n",
		"hash": "bad95c4cf2105d9f60363ddf16ab7b82",
		"name": "requirePermission",
		"author": [
			"@Benzo-Fury [<@762918086349029386>]",
			"@needhamgary [<@342314924804014081>]"
		],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/requirePermission.ts",
		"example": "\n\n ```ts\n import { requirePermission } from \"../plugins/myPermCheck\";\n import { commandModule, CommandType } from \"@sern/handler\";\n export default commandModule({\n  plugins: [ requirePermission<CommandType>('target', 'permission', 'No response (optional)') ],\n  execute: (ctx) => {\n \t\t//your code here\n  }\n })\n ``` ",
		"version": "1.2.0"
	},
	{
		"description": "\n\n Checks if a command is available in a specific server.\n",
		"hash": "b1d78678451c260286a97de8f1cb9e07",
		"name": "serverOnly",
		"author": ["@Peter-MJ-Parker [<@371759410009341952>]"],
		"link": "https://raw.githubusercontent.com/sern-handler/awesome-plugins/main/TypeScript/serverOnly.ts",
		"example": "\n\n ```ts\n import { commandModule, CommandType } from \"@sern/handler\";\n import { serverOnly } from \"../plugins/serverOnly\";\n export default commandModule({\n   type: CommandType.Both,\n   plugins: [serverOnly([\"guildId\"], failMessage)], // fail message is the message you will see when the command is ran in the wrong server.\n   description: \"command description\",\n   execute: async (ctx, args) => {\n     // your code here\n   },\n });\n ```",
		"version": "1.0.0"
	}
]
